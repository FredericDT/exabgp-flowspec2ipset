#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
import json
import logging
import socket
import functools
import argparse

import pyroute2.ipset

LOG = logging.getLogger(__name__)

_ipset = pyroute2.ipset.IPSet()

ip4_set_name = 'a4'
ip6_set_name = 'a6'

# TODO: BGP Graceful Restart

IPSET_TYPE_HASH_NET = 'hash:net'

def create_ipset_if_not_exist(
    ipset_name: str, 
    address_family: int, 
    ipset_type: str = IPSET_TYPE_HASH_NET, 
):
    _ipset.create(
        ipset_name, 
        stype=ipset_type, 
        exclusive=False, # if set, raise an error if the ipset exists
        family=address_family,
    )

def _state_handler(d):
    '''
    # Up
    {
        "neighbor": {
            "address": {
                "local": "192.0.2.1", 
                "peer": "192.0.2.2"
            }, 
            "asn": {
                "local": 64512, 
                "peer": 64513
            }, 
            "state": "up"
        }
    }
    # Down
    {
        "neighbor": {
            "address": {
                "local": "192.0.2.1", 
                "peer": "192.0.2.2"
            }, 
            "asn": {
                "local": 64512, 
                "peer": 64513
            }, 
            "state": "down", 
            "reason": "peer reset, message (closing connection) error(the TCP connection was closed by the remote end)"
        }
    }

    '''
    if 'state' in d:
        if d['state'] == 'up':
            # IP4
            create_ipset_if_not_exist(ipset_name=ip4_set_name, address_family=socket.AF_INET)
            # IP6
            create_ipset_if_not_exist(ipset_name=ip6_set_name, address_family=socket.AF_INET6)

        if d['state'] == 'down':
            # IP4
            _ipset.flush(ip4_set_name)
            # IP6
            _ipset.flush(ip6_set_name)


    
def _update_handler(d):
    '''
    # Announce 4
    {
        "neighbor": {
            "address": {
                "local": "192.0.2.1", 
                "peer": "192.0.2.2"
            }, 
            "asn": {
                "local": 64512, 
                "peer": 64513
            }, 
            "direction": "receive", 
            "message": {
                "update": {
                    "attribute": {
                        "origin": "igp", 
                        "as-path": [64513], 
                        "confederation-path": [], 
                        "extended-community": [
                            {
                                "value": 9225060886715039744, 
                                "string": "rate-limit:0"
                            }
                        ]
                    }, 
                    "announce": {
                        "ipv4 flow": {
                            "no-nexthop": [
                                {
                                    "source-ipv4": [
                                        "100.64.1.0/24"
                                    ], 
                                    "string": "flow source-ipv4 100.64.1.0/24"
                                }
                            ]
                        }
                    }
                }
            }
        }
    }

    # Withdraw 4
    {
        "neighbor": {
            "address": {
                "local": "192.0.2.1", 
                "peer": "192.0.2.2"
            }, 
            "asn": {
                "local": 64512, 
                "peer": 64513
            }, 
            "direction": "receive", 
            "message": {
                "update": {
                    "attribute": {
                        "origin": "igp", 
                        "as-path": [64513], 
                        "confederation-path": [], 
                        "extended-community": [
                            {
                                "value": 9225060886715039744, 
                                "string": "rate-limit:0"
                            }
                        ]
                    }, 
                    "withdraw": {
                        "ipv4 flow": [
                            {
                                "source-ipv4": [
                                    "100.64.129.0/24"
                                ], 
                                "string": "flow source-ipv4 100.64.129.0/24"
                            }
                        ]
                    }
                }
            }
        }
    }
    '''
    if d['direction'] == 'receive':
        if 'message' in d and 'update' in d['message']:
            u = d['message']['update']
            action = None
            source_ipv4 = []
            source_ipv6 = []
            if 'announce' in u:
                action = 'announce'
            if 'withdraw' in u:
                action = 'withdraw'
            if action:
                e = u[action]
                if 'ipv4 flow' in e:
                    source_ipv4 = functools.reduce(
                        lambda a, b: a + b, 
                        map(
                            lambda x: x['source-ipv4'], 
                            e['ipv4 flow'] if action == 'withdraw' else e['ipv4 flow']['no-nexthop']
                        )
                    )
                if 'ipv6 flow' in e:
                    source_ipv6 = functools.reduce(
                        lambda a, b: a + b, 
                        map(
                            lambda x: x['source-ipv6'], 
                            e['ipv6 flow'] if action == 'withdraw' else e['ipv6 flow']['no-nexthop']
                        )
                    )
                if action == 'announce':
                    for i in source_ipv4:
                        _ipset.add(ip4_set_name, i, etype='net', family=socket.AF_INET)
                    for i in source_ipv6:
                        _ipset.add(ip6_set_name, i[:-2], etype='net', family=socket.AF_INET6)
                if action == 'withdraw':
                    for i in source_ipv4:
                        _ipset.delete(ip4_set_name, i, etype='net', family=socket.AF_INET)
                    for i in source_ipv6:
                        _ipset.delete(ip6_set_name, i[:-2], etype='net', family=socket.AF_INET6)
                    

def add_arguments(parser: argparse.ArgumentParser):
    parser.add_argument('--log-file', default='/var/log/exabgp-flowspec2ipset.log')
    parser.add_argument('--ip4set-name', default='flow4')
    parser.add_argument('--ip6set-name', default='flow6')
    parser.add_argument('--log-level', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'])

    return parser

def main():
    global ip4_set_name, ip6_set_name

    parser = argparse.ArgumentParser('exabgp-flowspec2ipset')
    add_arguments(parser)
    args = parser.parse_args()

    ip4_set_name = args.ip4set_name
    ip6_set_name = args.ip6set_name

    logging.basicConfig(
        filename=args.log_file, 
        encoding='utf-8', level=getattr(logging, args.log_level.upper()),
    )
    
    state_handler = [ _state_handler, ]
    update_handler = [ _update_handler, ]

    try:
        for line in iter(sys.stdin.readline, b''):
            d = json.loads(line.strip())
            # LOG.debug(json.dumps(d))
            if d['type'] == 'state':
                LOG.debug(json.dumps(d['neighbor']))
                for i in state_handler:
                    i(d['neighbor'])
            if d['type'] == 'update':
                LOG.debug(json.dumps(d['neighbor']))
                for i in update_handler:
                    i(d['neighbor'])
    except KeyboardInterrupt as e:
        pass
    return 0

if __name__ == '__main__':
    sys.exit(main())
